.gitignore
*.py[co]

# Packages
*.egg
*.egg-info
dist
build
eggs
parts
bin
var
sdist
develop-eggs
.installed.cfg

# Installer logs
pip-log.txt

# Unit test / coverage reports
coverage.xml
.coverage
.tox

#Translations
*.mo

#Mr Developer
.mr.developer.cfg

# Vagrant
.vagrant/

# Redis
dump.rdb

# Pyenv
.python-version

.travis.yml
language: python
sudo: false
python:
  - 2.7
install:
  - pip install tox
  - pip install coveralls
script:
  - tox --recreate
after_success:
  - coveralls

CHANGES
2015-07-07
==========

* Removed dohmh_restaurant-inspections_002.zip from repository
* Added following management commands:
  - `python manage.py download_data`
  - `python manage.py create_db`
  - `python manage.py seed_db`
  - `python manage.py runserver`
  - `python manage.py drop_db`
  - `python manage.py flush_cache`
* Changed API endpoint
  - /find/by_name -> /restaurants/by_name
* Added API endpoint
  - /restaurants/by_cuisine
* Refactored code to match new dataset
* Updated README.rst

LICENSE
Copyright (c) 2013, Ryan Kanno
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

  Redistributions in binary form must reproduce the above copyright notice, this
  list of conditions and the following disclaimer in the documentation and/or
  other materials provided with the distribution.

  Neither the name of the {organization} nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

MANIFEST.in
include CHANGES
include LICENSE
include MANIFEST.in
include README.rst
include requirements-tox.txt
include requirements.txt
include setup.py
recursive-include nyc_inspections *.py
recursive-include tests *.py
prune *.pyc

Makefile
NOSETESTS ?= nosetests

.PHONY: nosetests nosetests.coverage test test.coverage flake8

test: nosetests flake8
test.coverage: nosetests.coverage flake8
test.profile: nosetests.profile flake8

nosetests:
	@$(NOSETESTS) --with-doctest

nosetests.coverage:
	@$(NOSETESTS) --with-xcoverage --cover-package=nyc_inspections --cover-tests --cover-erase --with-doctest

nosetests.profile:
	@$(NOSETESTS) --with-doctest --with-profile

flake8:
	@flake8 nyc_inspections tests

clean:
	@rm -rf .coverage
	@rm -rf coverage.xml

README.rst

.. image:: https://travis-ci.org/ryankanno/nyc-restaurant-inspections-api.svg?branch=master
   :target: https://travis-ci.org/ryankanno/nyc-restaurant-inspections-api

.. image:: https://coveralls.io/repos/ryankanno/nyc-restaurant-inspections-api/badge.svg?branch=master&service=github
   :target: https://coveralls.io/github/ryankanno/nyc-restaurant-inspections-api?branch=master

API for NYC restaurant inspections
==================================

A Flask + Redis weekend project that returns NYC restaurant inspection data.

Data courtesy of https://data.cityofnewyork.us/Health/DOHMH-New-York-City-Restaurant-Inspection-Results/xx67-kt59

Install
=======

* Install redis-server (sudo port install redis-server, brew install redis)
* Install the requirements by running `pip install -r requirements.txt`

Download the Socrata data
-------------------------

To download the socrata, run the following command:

.. code:: python

  python manage.py download_data

Make sure to remember the output file path (or pass in a path of your own)

.. code:: python

  python manage.py download_data --help

Create the database
-------------------

To create the database, run the following command:

.. code:: python

  python manage.py create_db

Seed the database
-----------------

To seed the database, run the following command:

.. code:: python

  python manage.py seed_db -f <output_file_path_from_download_data_command>

Run Server
----------

To run the server, run the following command:

.. code:: python

  python manage.py runserver

Drop the database
-----------------

After you're done playing with this magical goodness,
to drop the database, run the following command:

.. code:: python

  python manage.py drop_db


Examples
========

Here are some curl commands to play around with the api:

**Finding all restaurants (and inspections) with Japanese in their name**

.. code::

  curl -s -H "Accept:  application/json" -d "name=Japanese" http://localhost:5000/restaurants/by_name | python -mjson.tool


**Finding all restaurants (and inspections) with Japanese cuisine**

.. code::

  curl -s -H "Accept:  application/json" -d "cuisine=Japanese" http://localhost:5000/restaurants/by_cuisine | python -mjson.tool

**Finding restaurant with id 10**

.. code::

  curl -s -H "Accept:  application/json" http://localhost:5000/restaurants/10 | python -mjson.tool

TODO
====

License
=======
MIT

Vagrantfile
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "trusty64"
  config.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"
  config.vm.hostname = "nyc-inspections"
  config.vm.network "private_network", ip: "88.88.88.88"

  config.vm.synced_folder "nyc_inspections", "/home/nyc_inspections/apps/nyc_inspections"

  config.vm.provision :ansible do |ansible|
    ansible.playbook = "provisioning/ansible/playbook.yml"
    ansible.extra_vars = "provisioning/ansible/defaults/main.yml"
  end
end

config.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os

class DefaultConfig(object):
    DEBUG = True

    PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
    PROJECT_NAME = "nyc-restaurant-inspections"
    SECRET_KEY = "PLEASE_CHANGE_ME"

    DATABASE_URI = 'sqlite:////tmp/test.db'
    DEBUG_TB_INTERCEPT_REDIRECTS = False

    STATIC_DIR = os.path.join(PROJECT_ROOT, 'nyc_inspections', 'apps', 'static')
    TEMPLATE_DIR = os.path.join(PROJECT_ROOT, 'nyc_inspections', 'apps', 'templates')

    LOG_INI = 'etc/logging.ini.json'

# vim: filetype=python

manage.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from flask.ext.script import Manager
from flask.ext.script import prompt_bool
from nyc_inspections import app
from nyc_inspections.extensions import cache
from nyc_inspections.data.installer import seed_database
from nyc_inspections.data.installer import download_data_from_socrata
from nyc_inspections.database import create_db as c_db
from nyc_inspections.database import drop_db as d_db
import sys


manager = Manager(app)


@manager.option('-f', '--file_path', dest='file_path')
def download_data(file_path):
    """
    Downloads NYC restaurant inspection data from Socrata to `file_path`
    """
    download_path = download_data_from_socrata(file_path)
    sys.stdout.write("\r\nDownloaded Socrata data to {0}\n".
                     format(download_path))


@manager.command
def create_db():
    """
    Creates database
    """
    c_db(app.config['DATABASE_URI'])


@manager.command
def drop_db():
    """
    Drops database
    """
    if prompt_bool("Are you sure you want to remove all your data"):
        d_db(app.config['DATABASE_URI'])


@manager.option('-f', '--file_path', dest='file_path', required=True)
def seed_db(file_path):
    """
    Downloads data from socrata to `file_path` and seeds data
    """
    seed_database(file_path)


@manager.command
def flush_cache():
    """
    Flush cache
    """
    with app.app_context():
        cache.clear()

if __name__ == "__main__":
    manager.run()

# vim: filetype=python

requirements-tox.txt
flake8
mock
nose
nosexcover

-r requirements.txt

requirements.txt
--index-url https://pypi.python.org/simple/

-e .

setup.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import re

try:
    from setuptools import setup
except ImportError:
    from distutils.core import setup

packages = [
]

here = os.path.dirname(os.path.realpath(__file__))

# Metadata

meta = {}
re_meta = re.compile(r'__(\w+?)__\s*=\s*(.*)')
re_version = re.compile(r'VERSION\s*=.*?\((.*?)\)')
strip_quotes = lambda s: s.strip("\"'")


def add_version(match):
    return {'VERSION': match.group(1).replace(" ", "").replace(",", ".")}


def add_meta(match):
    attr_name, attr_value = m.groups()
    return {attr_name: strip_quotes(attr_value)}


patterns = {
    re_meta: add_meta,
    re_version: add_version
}


with open(os.path.join(here, 'nyc_inspections/__init__.py'), 'r') as f:
    for line in f:
        for pattern, handler in patterns.items():
            m = pattern.match(line.strip())
            if m:
                meta.update(handler(m))

# Requires

requires = ['Flask==0.10.1',
            'SQLAlchemy==1.0.6',
            'Flask-SQLAlchemy==2.0',
            'Flask-Script>=2.0.5',
            'ordereddict',
            'Flask-Cache',
            'redis']

tests_require = ['flake8', 'mock', 'nose', 'nosexcover']

with open(os.path.join(here, 'README.rst')) as f:
    readme = f.read()

with open(os.path.join(here, 'CHANGES')) as f:
    changes = f.read()

classifiers = [
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Programming Language :: Python',
    'License :: OSI Approved :: MIT License',
    'Topic :: Utilities'
]

setup(
    name='nyc-inspections',
    version=meta['VERSION'],
    description='API for NYC restaurant inspections',
    long_description=readme + '\n\n' + changes,
    author=meta['author'],
    author_email=meta['email'],
    url="https://github.com/ryankanno/nyc-inspections",
    packages=packages,
    package_data={'': ['LICENSE']},
    package_dir={'nyc_inspections': 'nyc_inspections'},
    install_requires=requires,
    license=meta['license'],
    tests_require=tests_require,
    classifiers=classifiers,
    test_suite='nose.collector'
)


# vim: filetype=python

tox.ini
[tox]
envlist = flake8,py26,py27

[testenv:flake8]
commands = flake8 nyc_inspections
deps = flake8

[testenv]
commands = make test.coverage
deps = -rrequirements-tox.txt
whitelist_externals=/usr/bin/make

nyc_inspections/__init__.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import
from collections import namedtuple
version_info = namedtuple('version_info', ('major', 'minor', 'patch'))


VERSION = version_info(0, 0, 1)


__title__ = 'nyc_inspections'
__version__ = '{0.major}.{0.minor}.{0.patch}'.format(VERSION)
__author__ = 'Ryan Kanno'
__email__ = 'ryankanno@localkinegrinds.com'
__license__ = 'MIT'
__copyright__ = 'Copyright 2014 Ryan Kanno'

from .app import get_app
app = get_app()
from .api import *  # NOQA

# vim: filetype=python

nyc_inspections/api.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from nyc_inspections import app
from database import db_session
from extensions import cache
from flask import abort
from flask import jsonify
from flask import request
from models import Cuisine
from models import Inspection
from models import Restaurant


def _make_cache_key(*args, **kwargs):
    path = request.path
    args = str(hash(frozenset(request.values.items())))
    return (path + args).encode('utf-8')


@app.teardown_request
def shutdown_session(exception=None):
    db_session.remove()


@app.route("/restaurants/by_name", methods=['POST'])
@cache.cached(key_prefix=_make_cache_key)
def find_restaurants_by_name():
    results = []
    name = request.form.get('name', '', type=str).strip()

    if name:
        filterspec = Restaurant.name.like("%{0}%".format(name.upper()))
        restaurants = Restaurant.query.filter(filterspec)

        for restaurant in restaurants:
            results.append(restaurant.serialize)

    return jsonify(restaurants=results)


@app.route("/restaurants/by_cuisine", methods=['POST'])
@cache.cached(key_prefix=_make_cache_key)
def find_restaurants_by_cuisine():
    results = []
    cuisine = request.form.get('cuisine', '', type=str).strip()
    if cuisine:
        filterspec = Cuisine.name.like("%{0}%".format(cuisine.upper()))
        inspections = Inspection.query.\
            join(Cuisine).join(Restaurant).filter(filterspec)

        for inspection in inspections:
            results.append(inspection.restaurant.serialize)

    return jsonify(restaurants=results)


@app.route("/restaurants/<int:restaurant_id>", methods=['GET'])
@cache.cached(key_prefix=_make_cache_key)
def get_restaurant_by_id(restaurant_id):
    restaurant = {}
    if restaurant_id:
        restaurant = Restaurant.query.get(restaurant_id)
        if restaurant:
            return jsonify(restaurant.serialize)
    return abort(404)


# vim: filetype=python

nyc_inspections/app.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from config import DefaultConfig
from database import init_engine

from flask import Flask

from extensions import cache

import json
import logging
import logging.config
import os


def get_app(config=None, **kwargs):
    """Creates a Flask application"""
    app = Flask(__name__, **kwargs)

    configure_app(app, config)

    init_engine(app.config['DATABASE_URI'])

    cache.init_app(app)

    configure_logging(app)

    return app


def configure_app(app, config):
    app.config.from_object(DefaultConfig)

    if config is not None:
        app.config_from_object(config)

    if 'CONFIG_ENVVAR' in app.config:
        app.config.from_envvar(app.config['CONFIG_ENVVAR'])

    if 'TEMPLATE_DIR' in app.config:
        app.template_folder = app.config['TEMPLATE_DIR']

    if 'STATIC_DIR' in app.config:
        app.static_folder = app.config['STATIC_DIR']


def configure_logging(app):
    log_ini = os.path.join(app.root_path, app.config['LOG_INI'])

    if os.path.exists(log_ini):
        with open(log_ini, 'rt') as f:
            log_config = json.load(f)
        logging.config.dictConfig(log_config)

# vim: filetype=python

nyc_inspections/database.py
from sqlalchemy import create_engine as c_e
from sqlalchemy.orm import create_session
from sqlalchemy.orm import scoped_session
from sqlalchemy.ext.declarative import declarative_base


engine = None
db_session = scoped_session(
    lambda: create_session(bind=engine, autocommit=False, autoflush=False)
)
Base = declarative_base()
Base.query = db_session.query_property()


def init_engine(database_uri):
    global engine
    engine = c_e(database_uri, convert_unicode=True)


def create_db(database_uri):
    init_engine(database_uri)
    Base.metadata.create_all(bind=engine)


def drop_db(database_uri):
    init_engine(database_uri)
    Base.metadata.drop_all(bind=engine)

nyc_inspections/extensions.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from flask.ext.cache import Cache
cache = Cache(config={'CACHE_TYPE': 'redis'})

# vim: filetype=python

nyc_inspections/models.py
from sqlalchemy import Column
from sqlalchemy import Integer, Unicode, String, Boolean, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from database import Base
try:
    from collections import OrderedDict
except ImportError:  # pragma: no cover
    from ordereddict import OrderedDict
import itertools
from utilities import empty_dict


BOROUGHS = {
    'manhattan': 1,
    'bronx': 2,
    'brooklyn': 3,
    'queens': 4,
    'staten island': 5
}


class Action(Base):
    __tablename__ = 'Action'

    id = Column(Integer, primary_key=True)
    description = Column(String(150))

    def __init__(self, description=None):
        self.description = description

    def __repr__(self):
        return u"<Action %r>".format(self.description)


class Violation(Base):
    __tablename__ = 'Violation'

    id = Column(Integer, primary_key=True)
    code = Column(String(3))
    description = Column(Unicode(600))
    is_critical = Column(Boolean())

    def __init__(self, code=None, description=None, is_critical=False):
        self.code = code
        self.description = description
        self.is_critical = is_critical

    def __repr__(self):
        return u"<Violation %r>".format(self.code)


class Cuisine(Base):
    __tablename__ = 'Cuisine'

    id = Column(Integer, primary_key=True)
    name = Column(Unicode(64))

    def __init__(self, name=None):
        self.name = name

    def __repr__(self):
        return u"<Cuisine %r>".format(self.name)


class Restaurant(Base):
    __tablename__ = 'Restaurant'

    id = Column(Integer, primary_key=True)
    unique_id = Column(String(10), unique=True)
    name = Column(String(256))
    building = Column(String(10))
    street = Column(String(100))
    zip_code = Column(String(5))
    borough = Column(Integer())
    phone = Column(String(20))

    inspections = relationship(
        'Inspection', backref='restaurant',
        primaryjoin="Restaurant.id==Inspection.restaurant_id")

    def __init__(self, unique_id=None, name=None,
                 building=None, street=None, zip_code=None, borough=None,
                 phone=None):
        self.unique_id = unique_id
        self.name = name
        self.building = building
        self.street = street
        self.zip_code = zip_code
        self.borough = borough
        self.phone = phone

    def __repr__(self):
        return u"<Restaurant %r>".format(self.name)

    def _serialized_inspections(self):
        serialized_inspections = []
        if self.inspections:
            groups = []
            sorted_inspections = sorted(
                self.inspections, key=lambda x: x.inspected_at,
                reverse=True)

            for k, g in itertools.groupby(sorted_inspections,
                                          key=lambda x: x.inspected_at):
                groups.append(list(g))

            for group in groups:
                if len(group) > 0:
                    serialized_inspection = self._init_inspection(group[0])
                    violations = []
                    for inspection in group:
                        violations.append(self._parse_violation(inspection))
                    serialized_inspection['violations'] = violations
                    serialized_inspections.append(serialized_inspection)

        return serialized_inspections

    def _init_inspection(self, inspection_obj):
        inspection = {}
        if inspection_obj:
            inspection = inspection_obj.serialize
            empty_dict(inspection,
                       ['action_desc',
                        'violation_code', 'violation_desc',
                        'violation_is_critical'])
        return inspection

    def _parse_violation(self, inspection_obj):
        violation = {}
        if inspection_obj:
            inspection = inspection_obj.serialize
            violation['violation_code'] = inspection['violation_code']
            violation['violation_desc'] = inspection['violation_desc']
            violation['violation_is_critical'] = \
                inspection['violation_is_critical']
        return violation

    @property
    def address(self):
        bldg = self.building.strip()
        bldg = "{0} ".format(bldg) if len(bldg) > 0 else ""
        if self.street and self.zip_code:
            return u"{building}{street}".format(
                building=bldg, street=self.street)
        else:
            return ""

    @property
    def serialize(self):
        restaurant = OrderedDict()
        restaurant['id'] = self.id
        restaurant['name'] = self.name
        restaurant['phone'] = self.phone
        restaurant['street_address'] = self.address
        restaurant['zip_code'] = self.zip_code
        restaurant['city'] = 'New York'
        restaurant['state'] = 'NY'
        restaurant['borough'] = [borough for borough, index in BOROUGHS.items()
                                 if index == self.borough][0]
        restaurant['inspections'] = self._serialized_inspections()
        return restaurant


class Inspection(Base):
    __tablename__ = 'Inspection'

    id = Column(Integer, primary_key=True)
    restaurant_id = Column(Integer, ForeignKey('Restaurant.id'))
    cuisine_id = Column(Integer, ForeignKey('Cuisine.id'))
    action_id = Column(Integer, ForeignKey('Action.id'))
    violation_id = Column(Integer, ForeignKey('Violation.id'))
    inspected_at = Column(DateTime)
    inspection_type = Column(String)
    score = Column(Integer)
    current_grade = Column(String)
    graded_at = Column(DateTime)
    generated_at = Column(DateTime)

    cuisine = relationship(
        'Cuisine', uselist=False,
        primaryjoin="Inspection.cuisine_id==Cuisine.id")

    action = relationship(
        'Action', uselist=False,
        primaryjoin="Inspection.action_id==Action.id")

    violation = relationship(
        'Violation', uselist=False,
        primaryjoin="Inspection.violation_id==Violation.id")

    def __init__(self, restaurant_id=None, cuisine_id=None,
                 action_id=None, violation_id=None,
                 inspected_at=None, inspection_type=None,
                 score=None, current_grade=None, graded_at=None,
                 generated_at=None):
        self.restaurant_id = restaurant_id
        self.cuisine_id = cuisine_id
        self.action_id = action_id
        self.violation_id = violation_id
        self.inspected_at = inspected_at
        self.inspection_type = inspection_type
        self.score = score
        self.current_grade = current_grade
        self.graded_at = graded_at
        self.generated_at = generated_at

    def __repr__(self):
        return u"<Inspection {0}>".format(self.id)

    @property
    def serialize(self):
        inspection = {
            'score': self.score,
            'current_grade': self.current_grade,
            'inspection_type': self.inspection_type,
            'inspection_date': self.inspected_at.strftime('%Y-%m-%dT%H:%M:%S'),
            'action_desc': '',
            'violation_code': '',
            'violation_desc': '',
            'violation_is_critical': ''
        }

        if self.graded_at:
            inspection['graded_date'] = \
                self.graded_at.strftime('%Y-%m-%dT%H:%M:%S')

        if self.action:
            inspection['action_desc'] = self.action.description

        if self.violation:
            inspection['violation_code'] = self.violation.code
            inspection['violation_desc'] = self.violation.description
            inspection['violation_is_critical'] = self.violation.is_critical

        return inspection

nyc_inspections/utilities.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-


def empty_dict(dict, keys=None):
    if keys:
        for key in keys:
            if key in dict:
                del dict[key]
    else:
        dict.clear()

# vim: filetype=python

tests/__init__.py

tests/test_models.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from nose.tools import ok_
from nyc_inspections.models import BOROUGHS
from nyc_inspections.models import Action
from nyc_inspections.models import Cuisine
from nyc_inspections.models import Violation
import unittest


class TestModels(unittest.TestCase):

    def test_boroughs(self):
        ok_(BOROUGHS['manhattan'] == 1)
        ok_(BOROUGHS['bronx'] == 2)
        ok_(BOROUGHS['brooklyn'] == 3)
        ok_(BOROUGHS['queens'] == 4)
        ok_(BOROUGHS['staten island'] == 5)
        ok_(len(BOROUGHS) == 5)

    def test_action(self):
        action_desc = "Something bad"
        action_params = {
            'description': action_desc,
        }
        action = Action(**action_params)
        ok_(action.description == action_desc)

    def test_cuisine(self):
        cuisine_name = "Japanese"
        cuisine_params = {
            'name': cuisine_name,
        }
        cuisine = Cuisine(**cuisine_params)
        ok_(cuisine.name == cuisine_name)

    def test_violation(self):
        violation_code = "10E"
        violation_desc = "Bad violation"
        violation_is_critical = False
        violation_params = {
            'code': violation_code,
            'description': violation_desc,
        }
        violation = Violation(**violation_params)
        ok_(violation.code == violation_code)
        ok_(violation.description == violation_desc)
        ok_(violation.is_critical == violation_is_critical)


# vim: filetype=python

tests/test_utilities.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from nose.tools import ok_
from nyc_inspections.utilities import empty_dict
import unittest


class TestUtilities(unittest.TestCase):

    def test_empty_dict(self):
        d1 = {"foo": 1}
        ok_(len(d1) == 1)
        empty_dict(d1)
        ok_(len(d1) == 0)
        d2 = {"foo": 1, "bar": 2}
        ok_(len(d2) == 2)
        ok_(d2["foo"] == 1)
        empty_dict(d2, ["foo"])
        ok_("foo" not in d2)
        ok_("bar" in d2)


# vim: filetype=python

nyc_inspections/data/__init__.py

nyc_inspections/data/installer.py
#!/usr/bin/env python
# -*- coding: utf-8 -*-


__author__ = "Ryan Kanno <ryankanno@localkinegrinds.com>"
__url__ = ""
__version__ = ""
__license__ = ""


import csv
from datetime import datetime
import itertools as IT
import logging
import os
import sys
import time
import traceback
import urllib


DATA_DIRECTORY = os.path.normpath(os.path.realpath(os.path.dirname(__file__)))

from ..models import Action
from ..models import Violation
from ..models import Cuisine
from ..models import Restaurant
from ..models import Inspection
from ..models import BOROUGHS
from ..database import db_session


DATA_URL = ("https://data.cityofnewyork.us/api/views/xx67-kt59/"
            "rows.csv?accessType=DOWNLOAD")

CSV_DATETIME_FORMAT = '%m/%d/%Y'


ACTION_CACHE = {}
CUISINE_CACHE = {}
VIOLATION_CACHE = {}
RESTAURANT_CACHE = {}
INSPECTION_CACHE = []


def process_data(data_file_path):
    logging.debug("Begin processing data file: {0}\n".format(data_file_path))

    with open(data_file_path, 'rb') as f:
        rdr = csv.DictReader(f, delimiter=',')
        rdr.next()

        process_metadata_into_cache(rdr)
        bulk_save_metadata_cache()

        f.seek(0)
        rdr.next()

        process_inspections_into_cache(rdr)
        bulk_save_inspections()

    logging.debug("End processing {0}\n".format(data_file_path))


def process_metadata_into_cache(reader):
    for idx, row in enumerate(reader):
        logging.debug("Processing row {0}".format(idx))
        _process_into_cache(row, process_inspections=False)


def process_inspections_into_cache(reader):
    for idx, row in enumerate(reader):
        logging.debug("Processing row {0}".format(idx))
        _process_into_cache(row, process_inspections=True)


def bulk_save_metadata_cache():
    violation_dict_list = [violation for violation in VIOLATION_CACHE.values()]
    violation_list = []
    for violation_dict in violation_dict_list:
        violation_list.append(violation_dict.values())

    db_session.bulk_save_objects(ACTION_CACHE.values(), return_defaults=True)
    db_session.bulk_save_objects(CUISINE_CACHE.values(), return_defaults=True)
    db_session.bulk_save_objects(
        list(IT.chain(*violation_list)),
        return_defaults=True)
    db_session.bulk_save_objects(
        RESTAURANT_CACHE.values(),
        return_defaults=True)
    db_session.commit()


def bulk_save_inspections():
    db_session.bulk_save_objects(INSPECTION_CACHE, return_defaults=False)
    db_session.commit()


def _process_into_cache(row, process_inspections=False):
    action = _process_action_row(row)
    cuisine = _process_cuisine_row(row)
    violation = _process_violation_row(row)
    restaurant = _process_restaurant_row(row)

    if process_inspections:
        _process_inspection_row(row, action, cuisine, violation, restaurant)


def _process_action_row(row):
    action_desc = row['ACTION'].strip()
    if action_desc not in ACTION_CACHE:
        action = Action(action_desc)
        ACTION_CACHE[action_desc] = action
    return ACTION_CACHE[action_desc]


def _process_cuisine_row(row):
    cuisine_name = row['CUISINE DESCRIPTION'].strip().decode('iso-8859-1')
    if cuisine_name not in CUISINE_CACHE:
        cuisine = Cuisine(cuisine_name)
        CUISINE_CACHE[cuisine_name] = cuisine
    return CUISINE_CACHE[cuisine_name]


def _process_violation_row(row):
    violation_code = row['VIOLATION CODE'].strip()
    violation_desc = row['VIOLATION DESCRIPTION'].strip().decode('iso-8859-1')
    if violation_code not in VIOLATION_CACHE:
        is_critical = row['CRITICAL FLAG'].strip() == 'Critical'
        violation = Violation(code=violation_code,
                              description=violation_desc,
                              is_critical=is_critical)
        VIOLATION_CACHE[violation_code] = {violation_desc: violation}
        return violation
    else:
        if violation_desc not in VIOLATION_CACHE[violation_code]:
            is_critical = row['CRITICAL FLAG'].strip() == 'Critical'
            violation = Violation(code=violation_code,
                                  description=violation_desc,
                                  is_critical=is_critical)
            VIOLATION_CACHE[violation_code][violation_desc] = violation
            return violation
        else:
            return VIOLATION_CACHE[violation_code][violation_desc]


def _process_restaurant_row(row):
    unique_id = row['CAMIS'].strip()

    if unique_id not in RESTAURANT_CACHE:
        name = row['DBA'].strip().decode('iso-8859-1')
        building = row['BUILDING'].strip()
        street = row['STREET'].strip()
        zip_code = row['ZIPCODE'].strip()
        borough = BOROUGHS.get(row['BORO'].strip().lower(), -1)
        phone = row['PHONE'].strip()
        restaurant = Restaurant(unique_id, name, building,
                                street, zip_code, borough, phone)
        RESTAURANT_CACHE[unique_id] = restaurant
    return RESTAURANT_CACHE[unique_id]


def _process_inspection_row(row, action, cuisine, violation, restaurant):
    if row['INSPECTION DATE'].strip():
        inspection_params = {}
        inspection_params['restaurant_id'] = restaurant.id
        inspection_params['cuisine_id'] = cuisine.id
        inspection_params['action_id'] = action.id
        inspection_params['violation_id'] = violation.id
        inspection_params['inspected_at'] = datetime.\
            strptime(row['INSPECTION DATE'].strip(), CSV_DATETIME_FORMAT)
        inspection_params['inspection_type'] = row['INSPECTION TYPE'].strip()
        inspection_params['score'] = row['SCORE'].strip()
        inspection_params['current_grade'] = row['GRADE'].strip()
        if row['GRADE DATE'].strip():
            inspection_params['graded_at'] = datetime.\
                strptime(row['GRADE DATE'].strip(), CSV_DATETIME_FORMAT)
        inspection_params['generated_at'] = datetime.\
            strptime(row['RECORD DATE'].strip().split(".")[0],
                     CSV_DATETIME_FORMAT)
        inspection = Inspection(**inspection_params)
        INSPECTION_CACHE.append(inspection)


def download_data_from_socrata(file_path=None):

    def download_progress(count, block_size, total_size):
        percent = int(count * block_size * 100 / total_size)
        sys.stdout.write("\r Downloading " + DATA_URL + " to " +
                         inspection_data_file_path + ("... %d%%" % percent))
        sys.stdout.flush()

    inspection_data_filename = "nyc-inspection-data-{0}.sqlite".format(
        time.strftime("%Y%m%d-%H%M%S"))

    inspection_data_file_path = os.path.join('/tmp', inspection_data_filename) \
        if file_path is None else file_path

    urllib.urlretrieve(
        DATA_URL,
        inspection_data_file_path,
        reporthook=download_progress)

    return inspection_data_file_path


def cleanup():
    logging.debug("Cleaning up")


def seed_database(file_path):
    try:
        process_data(file_path)
    except KeyboardInterrupt:
        logging.error("OMGWTFBBQ: CTRL-C, ftl.")
        sys.exit(1)
    except Exception:
        trace = traceback.format_exc()
        logging.error("OMGWTFBBQ: {0}".format(trace))
        sys.exit(1)
    finally:
        cleanup()

    # Yayyy-yah
    return 0


# vim: filetype=python

provisioning/ansible/playbook.yml
---
- hosts: all
  gather_facts: no
  sudo: true
  tasks:
    - name: apt >> update apt package cache
      apt: update_cache=yes cache_valid_time=3600
      environment: env.proxies

    - name: apt >> upgrade installed packages
      apt: upgrade=yes
      environment: env.proxies

    - name: pythondev >> python present
      apt: pkg=python2.7 state=latest
      environment: env.proxies

    - name: pythondev >> latest python libraries present
      apt: pkg={{ item }} state=latest
      with_items:
        - python-dev
        - python-pip
      environment: env.proxies

    - name: redis >> redis present
      apt: pkg=redis-server state=latest
      environment: env.proxies
      notify: restart redis

    - name: nginx >> nginx present
      apt: pkg=nginx state=latest
      environment: env.proxies

    - name: nginx >> conf present
      template: src={{ item.src }} dest={{ item.dest }} mode=0640 owner=root group=root
      with_items:
      - { src: 'templates/nginx/nginx.conf', dest: '/etc/nginx/nginx.conf' }
      - { src: 'templates/nginx/nginx-nyc_inspections.conf', dest: '/etc/nginx/sites-available/nginx-nyc_inspections.conf' }

    - name: nginx >> conf enabled
      file: src=/etc/nginx/sites-available/nginx-nyc_inspections.conf dest=/etc/nginx/sites-enabled/nginx-nyc_inspections.conf state=link

    - name: nginx >> delete default vhost
      file: path=/etc/nginx/sites-enabled/default state=absent
      notify: restart nginx

    - name: app >> install application
      command: bash -lc "cd /vagrant && sudo python setup.py install"

    - name: app >> install data
      command: bash -lc "cd /vagrant && python -m nyc_inspections.data.install" creates=/tmp/test.db
      # command: bash -lc "cd /vagrant && python -m nyc_inspections.data.install" creates=/home/nyc_inspections/apps/nyc_inspections/data/RI_Webextract_BigApps_Latest.xls


    - name: uwsgi >> uwsgi present
      apt: pkg=uwsgi state=latest
      environment: env.proxies

    - name: uwsgi >> uwsgi python plugin present
      apt: pkg=uwsgi-plugin-python state=latest
      environment: env.proxies

    - name: uwsgi >> uwsgi site conf present
      template: src=templates/uwsgi/nyc_inspections.xml dest=/etc/uwsgi/apps-available/nyc_inspections.xml mode=0640 owner=root group=root

    - name: uwsgi >> uwsgi site conf enabled
      file: src=/etc/uwsgi/apps-available/nyc_inspections.xml dest=/etc/uwsgi/apps-enabled/nyc_inspections.xml state=link
      notify: restart uwsgi

  handlers:
    - name: restart redis
      service: name=redis-server state=restarted enabled=true

    - name: restart nginx
      service: name=nginx pattern=/etc/init.d/nginx state=restarted enabled=yes

    - name: restart uwsgi
      service: name=uwsgi pattern=/etc/init.d/uwsgi state=restarted enabled=yes

provisioning/ansible/defaults/main.yml
env:
  proxies:
    http_proxy:
    https_proxy:
    ftp_proxy:

provisioning/ansible/templates/nginx/nginx-nyc_inspections.conf
# nginx conf - at some point, it will be config
upstream uwsgicluster {
    server 127.0.0.1:6969;
}

server {
    listen 80;
    charset utf-8;
    access_log /var/log/nginx/nyc_inspections-access.log;
    error_log  /var/log/nginx/nyc_inspections-error.log;

    gzip on;
    gzip_http_version 1.1;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_min_length  1100;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_disable "MSIE [1-6].(?!.*SV1)";

    root /home/nyc_inspections/apps/nyc_inspections;

	location = /robots.txt  { access_log off; log_not_found off; }
	location = /favicon.ico { access_log off; log_not_found off; }

    if ($request_uri ~* "^/favicon.ico") {
      rewrite ^/favicon.ico$ /static/img/favicon.ico last;
      break;
    }

    location ~* \.(less|ico|css|js|gif|jpe?g|png)(\?[0-9]+)?$ {
        expires max;
        add_header Pragma public;
        add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        access_log off;
        log_not_found off;
        tcp_nodelay off;
        break;
    }

    location / {
        uwsgi_pass uwsgicluster;
        include /etc/nginx/uwsgi_params;
    }
}

provisioning/ansible/templates/nginx/nginx.conf
user vagrant;
worker_processes 1;
pid /var/run/nginx.pid;

events {
    worker_connections 1;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile on;
    tcp_nopush on;

    keepalive_timeout 65;
    tcp_nodelay on;

    types_hash_max_size 2048;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

provisioning/ansible/templates/uwsgi/nyc_inspections.xml
<uwsgi>
    <http>127.0.0.1:6969</http>
    <pythonpath>/home/nyc_inspections/apps</pythonpath>
    <module>nyc_inspections.api</module>
    <callable>app</callable>
    <plugins>python</plugins>
    <processes>1</processes>
    <pidfile>/var/run/uwsgi/app/%n.pid</pidfile>
    <chmod-socket>666</chmod-socket>
    <chown-socket>1000:1000</chown-socket>
    <uid>1000</uid>
    <gid>1000</gid>
    <enable-threads/>
    <master/>
    <harakiri>120</harakiri>
    <max-requests>5000</max-requests>
</uwsgi>

